'use strict';

var _createClass = (function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

var input1 = void 0;
var input2 = void 0;
var submitButton = void 0;
var image1 = void 0;
var image2 = void 0;

var ImageUploader = (function() {
  function ImageUploader() {
    _classCallCheck(this, ImageUploader);
  }

  _createClass(ImageUploader, [
    {
      key: 'init',
      value: function init() {
        var _this = this;

        input1 = document.querySelector('#img1-input');
        input2 = document.getElementById('img2-input');
        submitButton = document.getElementById('submit-button');

        input1.addEventListener('change', function(e) {
          return _this.handleFileInput(e, 'image1');
        });
        input2.addEventListener('change', function(e) {
          return _this.handleFileInput(e, 'image2');
        });
        submitButton.addEventListener('click', this.postFiles);
        submitButton.addEventListener('touchstart', this.postFiles);
      }
    },
    {
      key: 'handleFileInput',
      value: function handleFileInput(e, name) {
        var fileList = e.target.files;
        var file = fileList[0];
        this.displayFileAsImg(file, name);
      }
    },
    {
      key: 'displayFileAsImg',
      value: function displayFileAsImg(file, name) {
        var fileReader = new FileReader();
        var imgContainer = document.querySelector('.image-container');
        fileReader.onload = function() {
          var id = 'out-' + name;
          var existingImg = document.getElementById(id);

          if (existingImg) {
            existingImg.src = fileReader.result;
            return;
          }

          var img = document.createElement('img');
          img.id = id;
          var result = fileReader.result;
          img.src = result;
          if (name === 'image1') {
            image1 = result.split(',')[1];
          } else {
            image2 = result.split(',')[1];
          }

          imgContainer.appendChild(img);
        };
        fileReader.readAsDataURL(file);
      }
    },
    {
      key: 'postFiles',
      value: async function postFiles() {
        if (!image1 || !image2) return;
        var request = {
          files: [image1, image2]
        };

        var textEl = document.querySelector('.result-text');
        var resultContainer = document.querySelector('.result-container');
        resultContainer.style.visibility = 'visible';
        textEl.innerText = 'Loading...';

        try {
          var url = '/api/image-upload';
          var response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
          });

          if (!response.ok) {
            throw new Error(response.statusText);
          }

          var data = await response.text();

          textEl.innerText = data;

          setTimeout(function() {
            window.location.reload();
          }, 3000);
        } catch (err) {
          var _textEl = document.querySelector('.result-text');
          _textEl.innerText = err.message;
        }
      }
    }
  ]);

  return ImageUploader;
})();

var imageUploader = new ImageUploader();
document.addEventListener('DOMContentLoaded', imageUploader.init());
